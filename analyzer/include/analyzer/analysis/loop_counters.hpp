/******************************************************************************
 *
 * Find non-negative loop counters.
 *
 * This pass is intended to be used as a pre-step for the gauge domain.
 * It detects the loop counters generated by the add-loop-counters arbos pass.
 *
 * Author: Maxime Arthaud
 *
 * Contact: ikos@lists.nasa.gov
 *
 * Notices:
 *
 * Copyright (c) 2017 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 *
 * Disclaimers:
 *
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
 * ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS,
 * ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE
 * ERROR FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO
 * THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
 * ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
 * RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
 * RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
 * DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
 * IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
 *
 * Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST
 * THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL
 * AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS
 * IN ANY LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH
 * USE, INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM,
 * RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD
 * HARMLESS THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS,
 * AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.
 * RECIPIENT'S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE,
 * UNILATERAL TERMINATION OF THIS AGREEMENT.
 *
 ******************************************************************************/

#ifndef ANALYZER_LOOP_COUNTERS_HPP
#define ANALYZER_LOOP_COUNTERS_HPP

#include <analyzer/analysis/common.hpp>
#include <analyzer/ar-wrapper/cfg.hpp>
#include <analyzer/ar-wrapper/literal.hpp>
#include <analyzer/ar-wrapper/wrapper.hpp>

namespace analyzer {

class LoopCountersPass : public ikos::writeable, public boost::noncopyable {
private:
  CfgFactory& _cfg_fac;
  LiteralFactory& _lfac;

public:
  LoopCountersPass(CfgFactory& cfg_fac, LiteralFactory& lfac)
      : _cfg_fac(cfg_fac), _lfac(lfac) {}

  void execute(Bundle_ref bundle) {
    FuncRange functions = ar::getFunctions(bundle);
    for (auto it = functions.begin(); it != functions.end(); ++it) {
      this->execute(*it);
    }
  }

private:
  void execute(Function_ref f) {
    arbos_cfg cfg = _cfg_fac[f];
    BBRange blocks = ar::getBlocks(f);
    for (auto it = blocks.begin(); it != blocks.end(); ++it) {
      this->execute(cfg, *it);
    }
  }

  void execute(arbos_cfg& cfg, Basic_Block_ref bb) {
    StmtRange stmts = ar::getStatements(bb);
    for (auto it = stmts.begin(); it != stmts.end(); ++it) {
      Statement_ref stmt = *it;

      if (ar::is_assignment_stmt(stmt)) {
        Assignment_ref assign = node_cast< Assignment >(stmt);
        try {
          const scalar_lit_t& lhs = this->_lfac[ar::getLeftOp(assign)];
          if (lhs.is_integer_var()) {
            varname_t var = lhs.var();
            // loop counters created by add-loop-counters start with shadow.
            // and end with .ctn
            if (boost::starts_with(var->name(), "shadow.") &&
                boost::ends_with(var->name(), ".ctn")) {
              cfg.get_node(bb).mark_loop_counter(var);
            }
          }
        } catch (aggregate_literal_error&) {
        }
      }
    }
  }

public:
  void write(std::ostream& o) {}

}; // end class LoopCountersPass

} // end namespace analyzer

#endif // ANALYZER_LOOP_COUNTERS
